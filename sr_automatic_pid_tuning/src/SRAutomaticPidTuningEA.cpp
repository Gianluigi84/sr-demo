/** -*- mode: c++; c-indent-level: 4; c++-member-init-indent: 8; comment-column: 35; -*-

The above line is usefulin Emacs-like editors
 */

/*
Template for creating a new representation in EO
================================================

This is the template main file.
It includes all other files that have been generated by the script create.sh
so it is the only file to compile.

In case you want to build up a separate library for your new Evolving Object,
you'll need some work - follow what's done in the src/ga dir, used in the
main file BitEA in tutorial/Lesson4 dir.
Or you can wait until we do it :-)
*/

// Miscilaneous include and declaration
#include <iostream>
using namespace std;

// eo general include
#include <eo>
// the real bounds (not yet in general eo include)
#include <utils/eoRealVectorBounds.h>

// include here whatever specific files for your representation
// Basically, this should include at least the following

/** definition of representation:
 * class eoSRAutomaticPidTuning MUST derive from EO<FitT> for some fitness
 */
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuning.h"

/** definition of initilizqtion:
 * class eoSRAutomaticPidTuningInit MUST derive from eoInit<eoSRAutomaticPidTuning>
 */
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuningInit.h"

/** definition of evaluation:
 * class eoSRAutomaticPidTuningEvalFunc MUST derive from eoEvalFunc<eoSRAutomaticPidTuning>
 * and should test for validity before doing any computation
 * see tutorial/Templates/evalFunc.tmpl
 */
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuningEvalFunc.h"

/** definitions of operators: write as many classes as types of operators
 * and include them here. In this simple example,
 * one crossover (2->2) and one mutation (1->1) operators are used
 */
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuningQuadCrossover.h"
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuningMutation.h"

/* and (possibly) your personal statistics */
#include "sr_automatic_pid_tuning/eoSRAutomaticPidTuningStat.h"

// GENOTYPE   eoSRAutomaticPidTuning ***MUST*** be templatized over the fitness

//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// START fitness type: double or eoMaximizingFitness if you are maximizing
//                     eoMinimizingFitness if you are minimizing
typedef eoMinimizingFitness MyFitT ;	// type of fitness
// END fitness type
//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

// Then define your EO objects using that fitness type
typedef eoSRAutomaticPidTuning<MyFitT> Indi;      // ***MUST*** derive from EO


// Use existing modules to define representation independent routines

// how to initialize the population
// it IS representation independent if an eoInit is given
#include <do/make_pop.h>
eoPop<Indi >&  make_pop(eoParser& _parser, eoState& _state, eoInit<Indi> & _init)
{
  return do_make_pop(_parser, _state, _init);
}

// the stopping criterion
#include <do/make_continue.h>
eoContinue<Indi>& make_continue(eoParser& _parser, eoState& _state, eoEvalFuncCounter<Indi> & _eval)
{
  return do_make_continue(_parser, _state, _eval);
}

// outputs (stats, population dumps, ...)
#include <do/make_checkpoint.h>
eoCheckPoint<Indi>& make_checkpoint(eoParser& _parser, eoState& _state, eoEvalFuncCounter<Indi>& _eval, eoContinue<Indi>& _continue)
{
  return do_make_checkpoint(_parser, _state, _eval, _continue);
}

// evolution engine (selection and replacement)
#include <do/make_algo_scalar.h>
eoAlgo<Indi>&  make_algo_scalar(eoParser& _parser, eoState& _state, eoEvalFunc<Indi>& _eval, eoContinue<Indi>& _continue, eoGenOp<Indi>& _op, eoDistance<Indi> *_dist = NULL)
{
  return do_make_algo_scalar(_parser, _state, _eval, _continue, _op, _dist);
}

// simple call to the algo. stays there for consistency reasons
// no template for that one
#include <do/make_run.h>
// the instanciating fitnesses
#include <eoScalarFitness.h>
void run_ea(eoAlgo<Indi>& _ga, eoPop<Indi>& _pop)
{
  do_run(_ga, _pop);
}

// checks for help demand, and writes the status file
// and make_help; in libutils
void make_help(eoParser & _parser);

// now use all of the above, + representation dependent things
int main(int argc, char* argv[])
{
  try
  {
    eoParser parser(argc, argv);  // for user-parameter reading

    eoState state;    // keeps all things allocated

    // The fitness
    //////////////
    eoSRAutomaticPidTuningEvalFunc<Indi> plainEval/* (varType  _anyVariable) */;
    // turn that object into an evaluation counter
    eoEvalFuncCounter<Indi> eval(plainEval);

    std::string joint = "ffj3";
    joint = parser.createParam(joint, "joint", "Joint you want to tune", 'j', "Automatic PID Tuning" ).value();

    std::cout << " Will tune joint: "<< joint <<std::endl;

    // a genotype initializer
    std::vector<int> seed;
    seed.push_back(10);
    seed.push_back(20);
    seed.push_back(30);
    seed.push_back(40);
    std::vector<int> max_variations;
    max_variations.push_back(10);
    max_variations.push_back(20);
    max_variations.push_back(30);
    max_variations.push_back(40);

    eoSRAutomaticPidTuningInit<Indi> init(seed, max_variations, joint);
    // or, if you need some parameters, you might as well
    // - write a constructor of the eoSRAutomaticPidTuningInit that uses a parser
    // - call it from here:
    //        eoSRAutomaticPidTuningInit<Indi> init(parser);

    // if you want to do sharing, you'll need a distance.
    // see file utils/eoDistance.h
    //
    // IF you representation has an operator[]() double-castable,
    // then you can use for instance the quadratic distance (L2 norm)
    //    eoQuadDistance<Indi> dist;
    // or the Hamming distance (L1 norm)
    // eoHammingDistance<Indi> dist;


    // Build the variation operator (any seq/prop construct)
    // here, a simple example with only 1 crossover (2->2, a QuadOp) and
    // one mutation, is given.
    // Hints to have choice among multiple crossovers and mutations are given

    // A (first) crossover (possibly use the parser in its Ctor)
    eoSRAutomaticPidTuningQuadCrossover<Indi> cross /* (eoParser parser) */;

    // IF MORE THAN ONE:

    // read its relative rate in the combination
// double cross1Rate = parser.createParam(1.0, "cross1Rate", "Relative rate for crossover 1", '1', "Variation Operators").value();

    // create the combined operator with the first one (rename it cross1 !!!)
// eoPropCombinedQuadOp<Indi> cross(cross1, cross1Rate);

    // and as many as you want the following way:
    // 1- write the new class by mimicking eoSRAutomaticPidTuningQuadCrossover.h
    // 2- include that file here together with eoSRAutomaticPidTuningQuadCrossover above
    // 3- uncomment and duplicate the following lines:
    //
// eoSRAutomaticPidTuningSecondCrossover<Indi> cross2(eoParser parser);
// double cross2Rate = parser.createParam(1.0, "cross2Rate", "Relative rate for crossover 2", '2', "Variation Operators").value();
// cross.add(cross2, cross2Rate);

    // NOTE: if you want some gentle output, the last one shoudl be like
    //  cross.add(cross, crossXXXRate, true);

    /////////////// Same thing for MUTATION

    // a (first) mutation   (possibly use the parser in its Ctor)
    eoSRAutomaticPidTuningMutation<Indi> mut /* (parser) */;

    // IF MORE THAN ONE:

    // read its relative rate in the combination
// double mut1Rate = parser.createParam(1.0, "mut1Rate", "Relative rate for mutation 1", '1', "Variation Operators").value();

    // create the combined operator with the first one (rename it cross1 !!!)
// eoPropCombinedMonOp<Indi> mut(mut1, mut1Rate);

    // and as many as you want the following way:
    // 1- write the new class by mimicking eoSRAutomaticPidTuningMutation.h
    // 2- include that file here together with eoSRAutomaticPidTuningMutation above
    // 3- uncomment and duplicate the following lines:
    //
// eoSRAutomaticPidTuningSecondMutation<Indi> mut2(eoParser parser);
// double mut2Rate = parser.createParam(1.0, "mut2Rate", "Relative rate for mutation 2", '2', "Variation Operators").value();
// mut.add(mut2, mut2Rate);

    // NOTE: if you want some gentle output, the last one shoudl be like
    //  mut.add(mut, mutXXXRate, true);

    // now encapsulate your crossover(s) and mutation(s) into an eoGeneralOp
    // so you can fully benefit of the existing evolution engines

    // First read the individual level parameters
    double pCross = parser.createParam(0.6, "pCross", "Probability of Crossover", 'C', "Variation Operators" ).value();
    // minimum check
    if ( (pCross < 0) || (pCross > 1) )
      throw runtime_error("Invalid pCross");

    double pMut = parser.createParam(0.1, "pMut", "Probability of Mutation", 'M', "Variation Operators" ).value();
    // minimum check
    if ( (pMut < 0) || (pMut > 1) )
      throw runtime_error("Invalid pMut");

    // now create the generalOp
    eoSGAGenOp<Indi> op(cross, pCross, mut, pMut);


    //// Now some representation-independent things
    //
    // You do not need to modify anything beyond this point
    // unless you want to add specific statistics to the checkpoint
    // in which case you should uncomment the corresponding block
    // and possibly modify the parameters in the stat object creation
    //////////////////////////////////////////////

    // initialize the population
    // yes, this is representation indepedent once you have an eoInit
    eoPop<Indi>& pop   = make_pop(parser, state, init);

    // stopping criteria
    eoContinue<Indi> & term = make_continue(parser, state, eval);
    // output
    eoCheckPoint<Indi> & checkpoint = make_checkpoint(parser, state, eval, term);


    // UNCOMMENT the following commented block if you want to add you stats

    // if uncommented, it is assumed that you will want to print some stat.
    // if not, then the following objects will be created uselessly - but what the heck!

    eoSRAutomaticPidTuningStat<Indi>   myStat;       // or maybe myStat(parser);
    checkpoint.add(myStat);
    // This one is probably redundant with the one in make_checkpoint, but w.t.h.
    eoIncrementorParam<unsigned> generationCounter("Gen.");
    checkpoint.add(generationCounter);
    // need to get the name of the redDir param (if any)
    std::string dirName =  parser.getORcreateParam(std::string("Res"), "resDir", "Directory to store DISK outputs", '\0', "Output - Disk").value() + "/";


    // those need to be pointers because of the if's
    eoStdoutMonitor *myStdOutMonitor;
    eoFileMonitor   *myFileMonitor;
    eoGnuplot1DMonitor *myGnuMonitor;

    // now check how you want to output the stat:
    bool printSRAutomaticPidTuningStat = parser.createParam(false, "coutSRAutomaticPidTuningStat", "Prints my stat to screen, one line per generation", '\0', "Automatic PID Tuning").value();
    bool fileSRAutomaticPidTuningStat = parser.createParam(false, "fileSRAutomaticPidTuningStat", "Saves my stat to file (in resDir", '\0', "Automatic PID Tuning").value();
    bool plotSRAutomaticPidTuningStat = parser.createParam(false, "plotSRAutomaticPidTuningStat", "On-line plots my stat using gnuplot", '\0', "Automatic PID Tuning").value();

    // should we write it on StdOut ?
    if (printSRAutomaticPidTuningStat)
    {
      myStdOutMonitor = new eoStdoutMonitor(false);
      // don't forget to store the memory in the state
      state.storeFunctor(myStdOutMonitor);
      // and of course to add the monitor to the checkpoint
      checkpoint.add(*myStdOutMonitor);
      // and the different fields to the monitor
      myStdOutMonitor->add(generationCounter);
      myStdOutMonitor->add(eval);
      myStdOutMonitor->add(myStat);
    }

    // first check the directory (and creates it if not exists already):
    if (fileSRAutomaticPidTuningStat || plotSRAutomaticPidTuningStat)
      if (! testDirRes(dirName, true) )
	throw runtime_error("Problem with resDir");

    // should we write it to a file ?
    if (fileSRAutomaticPidTuningStat)
    {
      // the file name is hard-coded - of course you can read
      // a string parameter in the parser if you prefer
      myFileMonitor = new eoFileMonitor(dirName + "myStat.xg");
      // don't forget to store the memory in the state
      state.storeFunctor(myFileMonitor);
      // and of course to add the monitor to the checkpoint
      checkpoint.add(*myFileMonitor);
      // and the different fields to the monitor
      myFileMonitor->add(generationCounter);
      myFileMonitor->add(eval);
      myFileMonitor->add(myStat);
    }

    // should we PLOT it on StdOut ? (one dot per generation, incremental plot)
    if (plotSRAutomaticPidTuningStat)
    {
      myGnuMonitor = new eoGnuplot1DMonitor(dirName+"plot_myStat.xg",minimizing_fitness<Indi>());
      // NOTE: you cand send commands to gnuplot at any time with the method
      // myGnuMonitor->gnuplotCommand(string)
      // par exemple, gnuplotCommand("set logscale y")

      // don't forget to store the memory in the state
      state.storeFunctor(myGnuMonitor);
      // and of course to add the monitor to the checkpoint
      checkpoint.add(*myGnuMonitor);
      // and the different fields to the monitor (X = eval, Y = myStat)
      myGnuMonitor->add(eval);
      myGnuMonitor->add(myStat);
    }

    // algorithm (need the operator!)
    eoAlgo<Indi>& ga = make_algo_scalar(parser, state, eval, checkpoint, op);
    // and the distance if you want to do sharing
    // eoAlgo<Indi>& ga = make_algo_scalar(parser, state, eval, checkpoint, op, &dist);

    ///// End of construction of the algorithm

    /////////////////////////////////////////
    // to be called AFTER all parameters have been read!!!
    make_help(parser);

    //// GO
    ///////
    // evaluate intial population AFTER help and status in case it takes time
    apply<Indi>(eval, pop);
    // if you want to print it out
    cout << "Initial Population\n";
    pop.sortedPrintOn(cout);
    cout << endl;

    run_ea(ga, pop); // run the ga

    cout << "Final Population\n";
    pop.sortedPrintOn(cout);
    cout << endl;

  }
  catch(exception& e)
  {
    cout << e.what() << endl;
  }
  return 0;
}

/* For the emacs weenies in the crowd.
Local Variables:
   c-basic-offset: 2
End:
*/
