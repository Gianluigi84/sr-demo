"""autogenerated by genmsg_py from SetInterpolatedIKMotionPlanParamsRequest.msg. Do not edit."""
import roslib.message
import struct


class SetInterpolatedIKMotionPlanParamsRequest(roslib.message.Message):
  _md5sum = "351122754b3043b9f5602d68d4eec5db"
  _type = "interpolated_ik_motion_planner/SetInterpolatedIKMotionPlanParamsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 num_steps



float64 consistent_angle



int32 collision_check_resolution





int32 steps_before_abort



float64 pos_spacing



float64 rot_spacing



byte collision_aware



byte start_from_end



float64[] max_joint_vels



float64[] max_joint_accs


"""
  __slots__ = ['num_steps','consistent_angle','collision_check_resolution','steps_before_abort','pos_spacing','rot_spacing','collision_aware','start_from_end','max_joint_vels','max_joint_accs']
  _slot_types = ['int32','float64','int32','int32','float64','float64','byte','byte','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       num_steps,consistent_angle,collision_check_resolution,steps_before_abort,pos_spacing,rot_spacing,collision_aware,start_from_end,max_joint_vels,max_joint_accs
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetInterpolatedIKMotionPlanParamsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_steps is None:
        self.num_steps = 0
      if self.consistent_angle is None:
        self.consistent_angle = 0.
      if self.collision_check_resolution is None:
        self.collision_check_resolution = 0
      if self.steps_before_abort is None:
        self.steps_before_abort = 0
      if self.pos_spacing is None:
        self.pos_spacing = 0.
      if self.rot_spacing is None:
        self.rot_spacing = 0.
      if self.collision_aware is None:
        self.collision_aware = 0
      if self.start_from_end is None:
        self.start_from_end = 0
      if self.max_joint_vels is None:
        self.max_joint_vels = []
      if self.max_joint_accs is None:
        self.max_joint_accs = []
    else:
      self.num_steps = 0
      self.consistent_angle = 0.
      self.collision_check_resolution = 0
      self.steps_before_abort = 0
      self.pos_spacing = 0.
      self.rot_spacing = 0.
      self.collision_aware = 0
      self.start_from_end = 0
      self.max_joint_vels = []
      self.max_joint_accs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_id2i2d2b.pack(_x.num_steps, _x.consistent_angle, _x.collision_check_resolution, _x.steps_before_abort, _x.pos_spacing, _x.rot_spacing, _x.collision_aware, _x.start_from_end))
      length = len(self.max_joint_vels)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.max_joint_vels))
      length = len(self.max_joint_accs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.max_joint_accs))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.num_steps, _x.consistent_angle, _x.collision_check_resolution, _x.steps_before_abort, _x.pos_spacing, _x.rot_spacing, _x.collision_aware, _x.start_from_end,) = _struct_id2i2d2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_vels = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_accs = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_id2i2d2b.pack(_x.num_steps, _x.consistent_angle, _x.collision_check_resolution, _x.steps_before_abort, _x.pos_spacing, _x.rot_spacing, _x.collision_aware, _x.start_from_end))
      length = len(self.max_joint_vels)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.max_joint_vels.tostring())
      length = len(self.max_joint_accs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.max_joint_accs.tostring())
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 38
      (_x.num_steps, _x.consistent_angle, _x.collision_check_resolution, _x.steps_before_abort, _x.pos_spacing, _x.rot_spacing, _x.collision_aware, _x.start_from_end,) = _struct_id2i2d2b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_vels = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.max_joint_accs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_id2i2d2b = struct.Struct("<id2i2d2b")
"""autogenerated by genmsg_py from SetInterpolatedIKMotionPlanParamsResponse.msg. Do not edit."""
import roslib.message
import struct


class SetInterpolatedIKMotionPlanParamsResponse(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "interpolated_ik_motion_planner/SetInterpolatedIKMotionPlanParamsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetInterpolatedIKMotionPlanParamsResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
class SetInterpolatedIKMotionPlanParams(roslib.message.ServiceDefinition):
  _type          = 'interpolated_ik_motion_planner/SetInterpolatedIKMotionPlanParams'
  _md5sum = '351122754b3043b9f5602d68d4eec5db'
  _request_class  = SetInterpolatedIKMotionPlanParamsRequest
  _response_class = SetInterpolatedIKMotionPlanParamsResponse
