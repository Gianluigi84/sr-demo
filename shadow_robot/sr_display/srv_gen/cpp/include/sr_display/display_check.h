/* Auto-generated by genmsg_cpp for file /home/hand/Projects-Bazaar/sr-ros-interface_xacro/shadow_robot/sr_display/srv/display_check.srv */
#ifndef SR_DISPLAY_SERVICE_DISPLAY_CHECK_H
#define SR_DISPLAY_SERVICE_DISPLAY_CHECK_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace sr_display
{
template <class ContainerAllocator>
struct display_checkRequest_ : public ros::Message
{
  typedef display_checkRequest_<ContainerAllocator> Type;

  display_checkRequest_()
  : joint_name()
  , attr_name()
  , display(0)
  {
  }

  display_checkRequest_(const ContainerAllocator& _alloc)
  : joint_name(_alloc)
  , attr_name(_alloc)
  , display(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _attr_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  attr_name;

  typedef int8_t _display_type;
  int8_t display;


private:
  static const char* __s_getDataType_() { return "sr_display/display_checkRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9193e4d43afbe934f28cd2694a323525"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "85b2cb070b780fc6900693d47429bb3f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string joint_name\n\
string attr_name\n\
int8 display\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, joint_name);
    ros::serialization::serialize(stream, attr_name);
    ros::serialization::serialize(stream, display);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, joint_name);
    ros::serialization::deserialize(stream, attr_name);
    ros::serialization::deserialize(stream, display);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(joint_name);
    size += ros::serialization::serializationLength(attr_name);
    size += ros::serialization::serializationLength(display);
    return size;
  }

  typedef boost::shared_ptr< ::sr_display::display_checkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_display::display_checkRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct display_checkRequest
typedef  ::sr_display::display_checkRequest_<std::allocator<void> > display_checkRequest;

typedef boost::shared_ptr< ::sr_display::display_checkRequest> display_checkRequestPtr;
typedef boost::shared_ptr< ::sr_display::display_checkRequest const> display_checkRequestConstPtr;


template <class ContainerAllocator>
struct display_checkResponse_ : public ros::Message
{
  typedef display_checkResponse_<ContainerAllocator> Type;

  display_checkResponse_()
  : success(0)
  {
  }

  display_checkResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef int8_t _success_type;
  int8_t success;


private:
  static const char* __s_getDataType_() { return "sr_display/display_checkResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0b13460cb14006d3852674b4c614f25f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "85b2cb070b780fc6900693d47429bb3f"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 success\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::sr_display::display_checkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_display::display_checkResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct display_checkResponse
typedef  ::sr_display::display_checkResponse_<std::allocator<void> > display_checkResponse;

typedef boost::shared_ptr< ::sr_display::display_checkResponse> display_checkResponsePtr;
typedef boost::shared_ptr< ::sr_display::display_checkResponse const> display_checkResponseConstPtr;

struct display_check
{

typedef display_checkRequest Request;
typedef display_checkResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct display_check
} // namespace sr_display

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sr_display::display_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9193e4d43afbe934f28cd2694a323525";
  }

  static const char* value(const  ::sr_display::display_checkRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9193e4d43afbe934ULL;
  static const uint64_t static_value2 = 0xf28cd2694a323525ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_display::display_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sr_display/display_checkRequest";
  }

  static const char* value(const  ::sr_display::display_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sr_display::display_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string joint_name\n\
string attr_name\n\
int8 display\n\
\n\
";
  }

  static const char* value(const  ::sr_display::display_checkRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sr_display::display_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b13460cb14006d3852674b4c614f25f";
  }

  static const char* value(const  ::sr_display::display_checkResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b13460cb14006d3ULL;
  static const uint64_t static_value2 = 0x852674b4c614f25fULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_display::display_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sr_display/display_checkResponse";
  }

  static const char* value(const  ::sr_display::display_checkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sr_display::display_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::sr_display::display_checkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sr_display::display_checkResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sr_display::display_checkRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_name);
    stream.next(m.attr_name);
    stream.next(m.display);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct display_checkRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sr_display::display_checkResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct display_checkResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sr_display::display_check> {
  static const char* value() 
  {
    return "85b2cb070b780fc6900693d47429bb3f";
  }

  static const char* value(const sr_display::display_check&) { return value(); } 
};

template<>
struct DataType<sr_display::display_check> {
  static const char* value() 
  {
    return "sr_display/display_check";
  }

  static const char* value(const sr_display::display_check&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sr_display::display_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85b2cb070b780fc6900693d47429bb3f";
  }

  static const char* value(const sr_display::display_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sr_display::display_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sr_display/display_check";
  }

  static const char* value(const sr_display::display_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sr_display::display_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85b2cb070b780fc6900693d47429bb3f";
  }

  static const char* value(const sr_display::display_checkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sr_display::display_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sr_display/display_check";
  }

  static const char* value(const sr_display::display_checkResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SR_DISPLAY_SERVICE_DISPLAY_CHECK_H

